Squishy Electron
================

This project is at alpha quality.  (I like doing it all myself.)


Requirements
================

The most important factor is your browser, and what features it supports.  I've given years rather than version numbers; most modern mainstream browsers should support all of these if they are reasonably up to date

Browser availability for important features I use:

WebGL 1 (mandatory): most browsers 2010 thru 2016, Android maybe 2016, depending on your browser

WebGL 2 (slightly better): google Chrome & mozilla Firefox Jan '17, apple Safari (both) & Edge 2020-2021

WebGL 2 if you enable experimental features: Chrome & Safari 2015-2017

WebAssembly (mandatory): most browsers 2017, on android maybe 2018

WebWorkers (soon to be mandatory): Safari & Firefox & Chrome 2009 to early 2010, Edge July 2015, Safari IOS 2012, Android 2013 - 2022 depending on your browser

In general, Android browsers lag the rest, although I'm not sure which browsers are most popular.  (I'm not testing under Android yet.)  Maybe Chrome, then Samsung, then Edge then Firefox.

Versions
========

v3 refers to the previous SquishyElectron project.
v4 is squishy_electron_4, this project.

Files
=====

The top level of the source is a standard React project from CreateReactApp.

src - the main JS sources
src/App.* - top level JS
src/controlPanel - all the stuff below the main display
src/engine - interface to the C++
src/utils - misc non-html functions
src/view - interface to WebGL
src/widgets - misc React components used in multiple places

public - misc files that the web app needs to be served, like index.html
public/index.html, manifest.json, robots.txt - the usual
public/docs/ - my ranblings, not organized yet
public/images/ - pngs etc used in app
public/logos/ - svgs and pngs that are logos, incl favicon
public/qEng/ - the quantum engine compiled objects (symlinks)

LICENSE, node_modules/, package-lock.json, package.json - the usual
Makefile - mostly runs stuff in quantumEngine
README.react.md - original README.md generated by CRA
articles/ - my research for this project
build/ - where a production build goes
maint/ - scripts I need here and there that CRA has no place for; mostly building production

quantumEngine - the C++ code that does the numerical calculations
quantumEngine/Makefile - how to compile it all
quantumEngine/building/ - scripts to compile it all
quantumEngine/commonConstants.h - generated
quantumEngine/debroglie/ - wave buffers
quantumEngine/directAccessors.h - a way for JS to access C++ object fields directly
quantumEngine/fourier/ - FFT code
quantumEngine/greiman/ - view buffer and other visual stuff
quantumEngine/main.cpp - main C++ function, runs when C++ starts up
quantumEngine/quantumEngine.* - compiled output of compiling; both dev and prod
quantumEngine/schrodinger/ - code that actually integrates Schrodinger's equation
quantumEngine/spaceWave/ - mostly the qSpace, I'll be moving this soon
quantumEngine/squish.h - global include file
quantumEngine/testing/ - scripts etc specifically for testing


Scripts
=======

To run scripts this project, you need to export SQUISH_ROOT to point to the
directory in one of your login files:
export SQUISH_ROOT='/opt/dvl/squishyElectron/SquishyElectron'

Usually the file ~/.profile works; if you already have another file with a name like ~/.*profile*, that would probably be better.  Otherwise, create .profile .

To use this source tree, you MUST put the following line in your ~/.profile or
~/.bash_profile or similar, whichever you have:
   export SQUISH_ROOT=/opt/dvl/squishyElectron/squishy_electron_4
or whatever path to your cloned repo.  You MUST do this to compile squishy
electron even if you don't use the aliases in this file!


If you're using BASH, you might also like to put this in your ~/.bashrc file, or if you have an existing ~/.*rc file for your shell:

source $SQUISH_ROOT/maint/aliases.sh

it'll define some aliases to quickly zip around among the important directories in the terminal.

quantumEngine
=============

This is C++ code that runs directly in the browser.  It relies on WebAssembly.
https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts

On top of that, the enscriptem package compiles and links C++ to make .wasm and other object files.  So, if you want to build this, you have to install emscripten:
https://emscripten.org/docs

Export qEMSCRIPTEN to point to the directory in one of your login files like .profile :
export qEMSCRIPTEN=/opt/dvl/emscripten


## operation


- a 'Space' describes where the electron travels.  (Classes qSpace in C++ or eSpace in JS.)  Most important parts:
N = number of datapoints in a wave, always a power of two, typically 32 thru 512
continuum = int enum that describes the edges of the space: wall or wrap-round
These two values dictate the wave buffers allocated all over.  If the user changes either, everything is tossed and reallocated.

- a 'Wave' is an array of N psi  values, each a complex number (two doubles, class qCx).  There's actually several classes:
	- qWave and eWave is a quantum system state
	- qSpectrum is an FFT of a qWave
	- qBuffer is the superclass of the qWave and qSpectrum
	- qWaves have an extra point on each end to aid in calculations, so if N=32, there's 66 double floats in the buffer.  Methods named fixBoundaries() automatically implements the details.

- an 'Avatar' manages display of a Wave.  There's two per space; the second one is for the Set Wave minigraph.  It owns a qViewBuffer, which is ultimately handed to WebGL.

- a 'Grinder' integrates the differential equation.


emscripten
==========

Follow the directions on this page to install it somewhere:
https://emscripten.org/docs/getting_started/downloads.html

then from the top level run this (or, make will do it):
quantumEngine/building/genExports.js

Go change that file as you add more C++ exports you want to call from JS.  They all have to be "C" functions, see the code.  Note there's a fair amount of overhead for each call; trace it in the debugger to see.  This is why I made the DirectAccess system; see directAccess.h, and classes that use it: e/qWave, e/qGrinder, Avatar


-------------------- node and python

I had to upgrade my Python to 3.9.5, otherwise the 'install' wouldn't work.  And then, add the 'certificates'.

I think it installs its own version of Python 3.9.2 (after I installed 3.9.5), and also its own version of node 14.15.5, which I also already have installed with nvm.  Should figure out a way to get rid of that someday.

oh yeah, here:
emsdk uninstall node-14.15.5-64bit
emsdk uninstall python-3.9.2-1-64bit

get the installed version numbers:
./emsdk list

----------------------

this is automatically done in the build scripts so you don't have to put them into your .profile or whatever files:

. /dvl/emscripten/emsdk/emsdk_env.sh

