/*
** volts -- CSS for voltage stuff as shown in the WaveView
** Copyright (C) 2021-2024 Tactile Interactive, all rights reserved
*/

@use "../widgets/common.scss";

// top of the WaveView where the graphics goes.  Height dictated by where the
// user last dragged the resize box in the corner, in WaveView state.  Width
// comes from the window width.  hmmm...
.WaveView {
	// the setting for showVoltage chooses one of these
	// display:none gets no events.  so change visibilty instead.
	.alwaysShowVoltage {visibility: visible}
	.hoverShowVoltage {visibility: hidden}
	.hoverShowVoltage:hover {visibility: visible}
	.neverShowVoltage {visibility: hidden}

	// encloses the actual glview, the timeOverlay, and the voltageOverlay
	// the voltageOverlay is what hides/shows with mouseover (see above)
	.viewArea .voltageOverlay {
		display: block;

		.VoltageArea {
			position: relative;
			width: 100%;
			height: 100%;
			z-index: 30;
			transform: scale(1, -1);
			pointer-events: all;
			// hmmm lemme think about this... pointer-events: none;  // need to click through for size box

			// for pointer enter/leave events
			.hoverBox {
				fill: transparent;
			}

			path.visibleLine {
				stroke: common.$voltageColor;
				stroke-width: 3px;
				fill: transparent;
				pointer-events: none;
			}

			path.tactileLine {
				stroke: none;
				stroke-width: 20px;
				fill: transparent;
				pointer-events: stroke;  // but this is sensitive
				cursor: pointer;
			}

			rect.wellSlab {
				fill: common.$voltageColor;

			}

			.voltageAxis {
				stroke: common.$voltageColor;
				fill: none;
				font-family: georgia, helvetica, sans-serif;
				font-size: .7em;

				// for some reason, the labels that d3 generates have all the text upside down.
				// also have to offset them the height of the canvas...
				g {
					scale: 1 -1;
				}
			}

		}  // end of VoltageArea

		// buttons etc to scroll and zoom the voltage
		.VoltageSidebar {
			// this is a column flex box
			position: absolute;
			right: .5em;
			height: 100%;
			display: flex;
			flex-direction: column;
			float: right;
			z-index: 35;

			//border: 1px #666 outset;

			// but particpates in its parent's row flex box.  Width and display set by code in WaveView.render()
			text-align: center;

			background-color: transparent;
			pointer-events: none;


			// scroll & zoom in/out buttons
			button {
				display: inline;
				background-color: transparent;
				width: 2em;
				height: 2em;
				border-radius: 1em;
				color: common.$voltageColor;
				padding: 0;
				//visibility: visible;
				border: .5px solid common.$voltageMuchDarkerColor;

				pointer-events: auto;
			}
			button:hover {
				border-color: common.$voltageColor;
			}
			button:active {
				background-color: #640;
			}

			// we use p as spacers between the buttons
			p {
				flex: 1 1 0em;
			}

			// .voltRail {
			// 	position: relative;
			// 	flex: 1 1;
			// 	margin: 2px;
			// 	border: 1px inset #aaa;
			// 	background-color: common.$voltageColor;
			//
			// 	.voltThumb {
			// 		position: absolute;
			// 		left: 0;
			// 		right: 0;
			// 		height: 2em;
			// 		line-height: 2em;
			// 		cursor: ns-resize;
			//
			// 		border: 1px outset #aaa;
			// 		background-color: common.$voltageDarkerColor;
			//
			// 		text-align: center;
			// 	}
			// }

			//input[type=range] {
			//	display: block;
			//	width: 100%;
			//	flex: 1 1;
			//	appearance: slider-vertical;  // works on safari & chrome, not firefox
			//	color: #000;
			//	background-color: #voltageColor;
			//	border: none;
			//	accent-color: #fd0;
			//}
		}
	}  // end of viewArea voltageOverlay

}

